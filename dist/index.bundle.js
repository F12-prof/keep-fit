(()=>{"use strict";var e,t={144:(e,t,i)=>{i.d(t,{Z:()=>p});var n=i(537),s=i.n(n),r=i(645),o=i.n(r),a=i(667),l=i.n(a),d=new URL(i(983),i.b),h=o()(s()),c=l()(d);h.push([e.id,'@font-face{font-family:"Cascadia Code";src:url('+c+') format("ttf");font-weight:600;font-style:normal}html,body,.row{margin:0;padding:0;height:100%;width:100%;background-color:#000}#pixi-content{height:100%;padding:0;display:flex;align-items:center;justify-content:center}#pixi-canvas{border:5px;border-color:#006400;border-radius:2px}.container{padding:0;margin:0}',"",{version:3,sources:["webpack://./src/styles/main.scss"],names:[],mappings:"AAAA,WACI,2BAAA,CACA,yDAAA,CACA,eAAA,CACA,iBAAA,CAGJ,eAGI,QAAA,CACA,SAAA,CACA,WAAA,CACA,UAAA,CACA,qBAAA,CAGJ,cACI,WAAA,CACA,SAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CAGJ,aACI,UAAA,CACA,oBAAA,CACA,iBAAA,CAGJ,WACI,SAAA,CACA,QAAA",sourcesContent:['@font-face {\r\n    font-family: "Cascadia Code";\r\n    src: url("../assets/cascadia-code.ttf") format("ttf");\r\n    font-weight: 600;\r\n    font-style: normal;\r\n}\r\n\r\nhtml,\r\nbody,\r\n.row {\r\n    margin: 0;\r\n    padding: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    background-color: black;\r\n}\r\n\r\n#pixi-content {\r\n    height: 100%;\r\n    padding: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n#pixi-canvas {\r\n    border: 5px;\r\n    border-color: darkgreen;\r\n    border-radius: 2px;\r\n}\r\n\r\n.container {\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n'],sourceRoot:""}]);const p=h},207:(e,t,i)=>{var n=i(976);const s={baseImage:{name:"baseImage",path:i(854)},muscles:i(949)},r={outter:i(206),inner:i(472),cross:i(489)},o={binaryColumns:[i(956),i(285),i(278),i(467),i(532),i(541),i(428),i(906),i(799),i(986)],emitterSetting:i(239),columnWidth:68,columnHeight:2300,particleTexturePath:i(266)};var a=i(940),l=i(265);class d extends n.Container{constructor(){super(),this.outterSprite=n.Sprite.from(r.outter),this.innerSprite=n.Sprite.from(r.inner),this.crossSprite=n.Sprite.from(r.cross),this.addChild(this.outterSprite,this.innerSprite,this.crossSprite),this.outterSprite.anchor.set(.5,.5),this.innerSprite.anchor.set(.5,.5),this.crossSprite.anchor.set(.5,.5),this.filters=[new l.p]}onUpdateFrame(e){const{outterSprite:t,innerSprite:i}=this;t.rotation+=.04*e,i.rotation-=.06*e}}class h extends n.Container{constructor(e,t,i,r){super(),this.muscles=[],this.lineStyle={color:16777215,width:2,alpha:.75,cap:n.LINE_CAP.ROUND,join:n.LINE_JOIN.ROUND},this.fillStyle={color:16746496,alpha:.25},this.pointer=new d,this.rgbSplitFilter=new a.w([0,0],[0,0],[0,0]),this.animationRounds=0,this.filterDelta=.03,this.halfPeriod=120,this.sceneWidth=e,this.sceneHeight=t,i&&(this.lineStyle=i),r&&(this.fillStyle=r);const o=this.baseImage=n.Sprite.from(s.baseImage.path);o.filters=[this.rgbSplitFilter],n.Ticker.shared.add(this.onUpdateFrame.bind(this)),o.anchor.set(.5,.5),o.x=e/2,o.y=t/2,this.addChild(this.baseImage),this.loadMusclesFromParsedObject(s.muscles),this.addChild(this.pointer),this.interactive=!0,this.on("mousemove",this.onMouseMove.bind(this)),this.on("mouseout",this.onMouseLeave.bind(this)),n.Ticker.shared.add(this.pointer.onUpdateFrame.bind(this.pointer)),this.pointer.position.set(-500,-500)}onClickMuscle(e){if(!this.output)return;const t=this.getMuscleFromEvent(e);this.output.append(`That's ${t.name}!`)}onMouseEnterMuscle(e){const t=this.getMuscleFromEvent(e);this.currentOverMuscle=t;const i=t.graphic;console.log("Mouse entering",t.name),i.scale.set(1.25)}onMouseLeaveMuscle(e){const t=this.currentOverMuscle,i=t.graphic;console.log("Mouse leaving",t.name),i.scale.set(1)}onMouseMove(e){document.body.style.cursor="none";const t=e.data.getLocalPosition(this);this.pointer.position.set(t.x,t.y)}onMouseLeave(e){document.body.style.cursor="pointer",this.pointer.position.set(-500,-500)}onUpdateFrame(e){++this.animationRounds;const{filterDelta:t,halfPeriod:i,animationRounds:n}=this,[s,r]=this.rgbSplitFilter.green;n<i?this.rgbSplitFilter.green=[s+t,r+t]:n<2*i&&(this.rgbSplitFilter.green=[s-t,r-t]),n==2*i&&(this.animationRounds=0)}bindOutput(e){this.output=e}getMuscleFromEvent(e){for(let t of this.muscles)if(t.graphic===e.target)return t}loadMusclesFromParsedObject(e){e.forEach((e=>{const t=new n.Graphics,i=e.geometry;t.beginFill(this.fillStyle.color,this.fillStyle.alpha),t.lineStyle(this.lineStyle),t.moveTo(i[0],i[1]);for(let e=2;e<i.length;e+=2)t.lineTo(i[e],i[e+1]);t.endFill(),t.position.set(e.x,e.y),t.cacheAsBitmap=!0,this.muscles.push({graphic:t,name:e.name,attributes:{}}),this.baseImage.addChild(t),t.interactive=!0,t.on("mouseover",this.onMouseEnterMuscle.bind(this)),t.on("mouseout",this.onMouseLeaveMuscle.bind(this)),t.on("click",this.onClickMuscle.bind(this))}))}}var c=i(182);class p extends n.Container{constructor(e,t,i){super(),this.binNumberColumns=[],this.binParticleContainer=new n.ParticleContainer,this.animatedRounds=0,this.sceneHeight=t,this.sceneWidth=e;const s=o.columnWidth,r=e/(i=i||e/s),a=r/s,l=o.columnHeight*a,d=i,h=o.binaryColumns.length;for(let e=0;e<d;e++){const i=new n.Container;for(let s=0;s<3;++s){const d=n.Sprite.from(o.binaryColumns[e%h]);d.anchor.set(.5,.5),d.scale.set(a),d.position.set(r*(e+.5),t/2+l*(s-1)),i.addChild(d)}this.binNumberColumns.push(i),this.addChild(i)}n.Ticker.shared.add(this.onUpdateFrame.bind(this));const p=new n.Graphics;p.beginFill(7517047,.6),p.lineStyle({alpha:0}),p.drawCircle(0,0,5),p.endFill();const u=this.binParticleEmitter=new c.Q5(this.binParticleContainer,n.Texture.from(o.particleTexturePath),o.emitterSetting);this.addChild(this.binParticleContainer),u.autoUpdate=!0,u.startAlpha.value=.02,this.binParticleContainer.blendMode=n.BLEND_MODES.SCREEN}onUpdateFrame(e){this.binNumberColumns.forEach(((e,t)=>{let i=t%3+2,n=t%3==0?1:-1;e.position.y+=i*n})),++this.animatedRounds,100==this.animatedRounds&&(this.animatedRounds=0,this.binNumberColumns.forEach((e=>{e.position.y=0})),this.binParticleEmitter.updateSpawnPos(Math.random()*this.sceneWidth,Math.random()*this.sceneHeight),this.binParticleEmitter.playOnce())}}class u extends n.Container{constructor(e,t,i,s,r){super(),this.textStyle=new n.TextStyle({dropShadow:!0,dropShadowAlpha:.6,dropShadowColor:"#b41d1d",fill:"#72b377",fontFamily:"Cascadia Code",fontSize:15,letterSpacing:2,lineJoin:"round",stroke:"#933939",wordWrap:!0}),this.lines=[],this.lineTexts=[],this.lineCursorFlickerPeriod=60,this.animateRounds=0,this.posX=e,this.posY=t,this.sceneWidth=i,this.sceneHeight=s,this.lineGap=r,this.lineWithGapHeight=r+this.textStyle.fontSize,this.maxLines=Math.floor(s/this.lineWithGapHeight),this.textStyle.wordWrapWidth=i,this.position.set(e,t);const o=this.lineCursor=new n.Graphics;o.beginFill(7517047),o.drawRect(0,0,10,this.textStyle.fontSize),o.endFill(),this.addChild(o),o.position.set(e,t),n.Ticker.shared.add(this.onUpdateFrame.bind(this))}clear(){this.lines=[],this.lineTexts.forEach((e=>{e.destroy()})),this.lineTexts=[]}append(e){this.lines.push(e);const t=new n.Text(e,this.textStyle),i=this.lineTexts.push(t)-1;return this.addChild(t),console.log("current lines:",this.lines.length),console.log("MaxLines:",this.maxLines),this.lines.length>this.maxLines?(this.lines.splice(0,1),this.lineTexts[0].destroy(),this.lineTexts.splice(0,1),this.lineTexts.forEach(((e,t)=>{e.position.y=this.getLinePosition(t)})),t.position.y=this.getLinePosition(i-1)):t.position.y=this.getLinePosition(i),this.lineCursor.position.set(t.width,t.y),this}getLinePosition(e){return e*this.lineWithGapHeight}onUpdateFrame(e){++this.animateRounds,this.animateRounds==this.lineCursorFlickerPeriod&&(this.lineCursor.visible=!this.lineCursor.visible,this.animateRounds=0)}}var m=i(379),g=i.n(m),b=i(795),f=i.n(b),A=i(569),y=i.n(A),C=i(565),x=i.n(C),S=i(216),v=i.n(S),w=i(589),M=i.n(w),P=i(144),F={};F.styleTagTransform=M(),F.setAttributes=x(),F.insert=y().bind(null,"head"),F.domAPI=f(),F.insertStyleElement=v(),g()(P.Z,F),P.Z&&P.Z.locals&&P.Z.locals;const T=new n.Application({view:document.getElementById("pixi-canvas"),resolution:2,autoDensity:!0,backgroundColor:0,width:document.body.clientWidth-50,height:document.body.clientHeight-50,antialias:!0}),O=document.body.clientHeight-50,k=T.screen.width-30-600,E=O,R=new n.Container,I=new p(600,O,20),L=new h(600,O);R.addChild(I),R.addChild(L),T.stage.addChild(R);const W=new n.Container,U=new u(630,0,k,E,5);L.bindOutput(U),W.addChild(U),U.append("Initializing communication system...").append("...Finished").append("hello, world"),T.stage.addChild(W)},854:(e,t,i)=>{e.exports=i.p+"98856d51bbe23ccf5f07.png"},983:(e,t,i)=>{e.exports=i.p+"1a29e496ddeb8ac310e2.ttf"},956:(e,t,i)=>{e.exports=i.p+"d951b294b83ab0bf697e.png"},285:(e,t,i)=>{e.exports=i.p+"e080917f83acfa98b669.png"},278:(e,t,i)=>{e.exports=i.p+"e02d6de59b3bb18047b2.png"},467:(e,t,i)=>{e.exports=i.p+"e09c86c8e75c142ccd1c.png"},532:(e,t,i)=>{e.exports=i.p+"e26e7bc15ffecb0273d2.png"},541:(e,t,i)=>{e.exports=i.p+"ca3977ad9c3d118859df.png"},428:(e,t,i)=>{e.exports=i.p+"5f6239bdc1d90bf32f73.png"},906:(e,t,i)=>{e.exports=i.p+"3dbedaf7485cf583f772.png"},799:(e,t,i)=>{e.exports=i.p+"05f74d3832ad015c3fc8.png"},986:(e,t,i)=>{e.exports=i.p+"29c9feb5946240ec532d.png"},266:(e,t,i)=>{e.exports=i.p+"1345d953adda0a64b002.png"},489:(e,t,i)=>{e.exports=i.p+"135d1fc7ead867e8d172.svg"},472:(e,t,i)=>{e.exports=i.p+"91df04a97ce77cada2d7.svg"},206:(e,t,i)=>{e.exports=i.p+"4a8115128fb45a86f07a.svg"},239:e=>{e.exports=JSON.parse('{"alpha":{"start":0.4,"end":0},"scale":{"start":2,"end":0.4,"minimumScaleMultiplier":1},"color":{"start":"#6bff61","end":"#d8ff4a"},"speed":{"start":10,"end":10,"minimumSpeedMultiplier":1},"acceleration":{"x":0,"y":0},"maxSpeed":0,"startRotation":{"min":0,"max":360},"noRotation":false,"rotationSpeed":{"min":0,"max":0},"lifetime":{"min":2,"max":1.8},"blendMode":"screen","frequency":0.01,"emitterLifetime":-1,"maxParticles":1000,"pos":{"x":0.5,"y":0.5},"addAtBack":true,"spawnType":"circle","spawnCircle":{"x":0,"y":0,"r":150}}')},949:e=>{e.exports=JSON.parse('[{"geometry":[-14.666656494140625,-16.53333914014982,-6.133331298828125,-15.733336151970548,-2.133331298828125,-16.26667656368602,7.20001220703125,-14.666670587327445,13.066680908203125,-12.00001430511361,18.4000244140625,-7.466674211289529,20,-3.4666745291809775,20,3.1999966939292506,17.333343505859375,8.266661940680962,13.600006103515625,11.73333646986194,12,16.53333914014982,4.800018310546875,16.53333914014982,-3.199981689453125,13.333342446220485,-9.866668701171875,8.533339775932603,-15.466644287109375,3.4666592703930803,-19.199981689453125,-3.733337105644779,-20,-8.53333977593266,-20,-11.200011316934336,-16.5333251953125,-14.400008010863644,-14.666656494140625,-16.53333914014982],"name":"deltoid","x":28.800018310546875,"y":-129.1999943097437},{"geometry":[-3.6666717529296875,-19.9999984105429,-5.6666717529296875,-11.733321211074156,-5.9333343505859375,-5.199996534983654,-7.6666717529296875,3.600005817412864,-10.199996948242188,11.733336469861854,-7.133331298828125,17.866667281256753,-0.73333740234375,19.9999984105429,4.3333282470703125,19.866667122310957,8.333328247070312,14.266676722631757,9.399993896484375,7.0666803465938415,10.199996948242188,-5.684341886080802e-14,9,-10.666663275824874,8.866668701171875,-16.26666130489815,5.9333343505859375,-19.199995422363656,2.866668701171875,-19.9999984105429,-0.600006103515625,-19.733320575291316,-3.6666717529296875,-19.9999984105429],"name":"extensor-muscles","x":3.266693115234375,"y":252.46663948165263},{"geometry":[-18,-19.333328247070312,-13.111083984375,-7.3333282470703125,-6.44439697265625,5.111114501953125,4.22222900390625,13.555557250976562,17.11114501953125,19.333328247070312,18,9.111129760742188,5.11114501953125,-6,-6,-11.77777099609375,-10,-14.888885498046875,-13.111083984375,-18.444442749023438,-18,-19.333328247070312],"name":"brachioradialis","x":87.33331298828125,"y":-65.33333587646484},{"geometry":[-11.555557250976562,-7.7777862548828125,-5.7777862548828125,-7.3332977294921875,6.6666717529296875,-7.3332977294921875,10.222213745117188,-7.7777862548828125,11.555557250976562,-2.8889007568359375,11.555557250976562,1.1110992431640625,9.333328247070312,7.7777862548828125,0.8889007568359375,6.4444427490234375,-5.7777862548828125,5.1110992431640625,-9.777786254882812,3.7777862548828125,-11.555557250976562,2.0000152587890625,-11.555557250976562,-7.7777862548828125],"name":"rectus abdominis","x":-23.555557250976562,"y":-44.88888716697693},{"geometry":[-12.133346557617188,-6.800002511342171,9.199996948242188,-7.333327664269774,11.599990844726562,-5.466674370235268,12.666671752929688,-3.066665405697421,12.133346557617188,1.99999984105429,9.466659545898438,7.333327664269774,4.9333343505859375,7.066680346593813,-2.2666778564453125,7.333327664269774,-7.0666656494140625,5.466674370235268,-10.266677856445312,4.133330970340495,-12.666671752929688,4.399993546804325,-12.400009155273438,1.7333220058026484,-12.133346557617188,-6.800002511342171],"name":"rectus abdominis","x":5.7333526611328125,"y":-45.06667732662541},{"geometry":[-10.5333251953125,-6.266669729020634,-10.5333251953125,1.7333296351965828,-7.600006103515625,4.933326329125862,-4.133331298828125,5.466666740841333,0.399993896484375,6.266669729020634,6.5333251953125,5.733329317305163,8.66668701171875,4.666663752662032,10.26666259765625,0.13333891762584926,10.5333251953125,-2.0000074704482245,6.800018310546875,-3.3333356115551283,1.20001220703125,-5.2000041643775035,-4.133331298828125,-6.266669729020634,-10.5333251953125,-6.266669729020634],"name":"rectus abdominis","x":-24.933319091796875,"y":-30.93333952161953},{"geometry":[-10.800003051757812,-3.9999920527147026,-11.066665649414062,2.9333341174654777,-8.666641235351562,5.866668234930984,-1.1999969482421875,5.333335452609418,4.4000091552734375,5.866668234930984,9.466690063476562,3.466666899787043,11.066665649414062,-1.0666655646430456,7.6000213623046875,-4.266662258572438,2.0000152587890625,-5.066665246751683,-3.3333282470703125,-5.866668234930984,-8.133316040039062,-5.066665246751683,-10.800003051757812,-3.9999920527147026],"name":"rectus abdominis","x":4.4000091552734375,"y":-29.200009886422976},{"geometry":[-8.266647338867188,-6.400001017252492,-9.066665649414062,0.7999953587853099,-8.800003051757812,4.533332464430174,-2.6666717529296875,6.400001017252549,3.7333526611328125,7.2000040054317935,6.6666717529296875,4.799995040893947,9.066665649414062,0.533332782321537,8.000015258789062,-4.266669887966344,4.8000030517578125,-7.2000040054317935,-3.9999847412109375,-7.2000040054317935,-6.9333343505859375,-6.666663593716322,-8.266647338867188,-6.400001017252492],"name":"rectus abdominis","x":-25.866653442382812,"y":-12.933340952130862},{"geometry":[-9.999984741210938,-4.533336279127099,-0.3999786376953125,-4.799998855590928,4.6666717529296875,-4.799998855590928,10.800003051757812,-3.200000508626289,10.533340454101562,0.2666587617668199,7.8666839599609375,3.7333332909478543,3.3333587646484375,4.799998855590928,-1.7333221435546875,4.799998855590928,-8.133316040039062,4.533336279127099,-10.800003051757812,3.4666707144840245,-10.533309936523438,0.2666587617668199,-9.999984741210938,-4.533336279127099],"name":"rectus abdominis","x":4.4000091552734375,"y":-12.133341778648543},{"geometry":[-8.933334350585938,0.13332747353496188,-15.866668701171875,-1.2000006675719703,-19.599998474121094,4.133327155643542,-17.73333740234375,10.26666178173528,-13.73333740234375,14.799994246165426,-7.333335876464844,18.53333898120411,0.9333343505859375,19.06666413413177,5.466667175292969,19.599996916453307,9.199996948242188,20.66666248109641,12.933334350585938,22.53333866331269,16.666664123535156,18.53333898120411,19.599998474121094,12.133330334557655,19.333328247070312,2.2666624175180914,18.79999542236328,-7.33333910836069,18.53333282470703,-15.066672081417067,14.533332824707031,-21.466669283972635,10.799995422363281,-22.53333866331269,5.466667175292969,-20.93333650165107,0.9333343505859375,-17.466669601864055,-2.5333328247070312,-11.600001366933071,-3.600006103515625,-6.799998696645218,-4.6666717529296875,-4.933337773216749,-4.9333343505859375,-2.266670046912026,-6,-0.13333891762582084,-8.933334350585938,0.13332747353496188],"name":"frontal belly","x":-25.199966430664062,"y":-221.20000225702904}]')}},i={};function n(e){var s=i[e];if(void 0!==s)return s.exports;var r=i[e]={id:e,loaded:!1,exports:{}};return t[e].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}n.m=t,e=[],n.O=(t,i,s,r)=>{if(!i){var o=1/0;for(h=0;h<e.length;h++){for(var[i,s,r]=e[h],a=!0,l=0;l<i.length;l++)(!1&r||o>=r)&&Object.keys(n.O).every((e=>n.O[e](i[l])))?i.splice(l--,1):(a=!1,r<o&&(o=r));if(a){e.splice(h--,1);var d=s();void 0!==d&&(t=d)}}return t}r=r||0;for(var h=e.length;h>0&&e[h-1][2]>r;h--)e[h]=e[h-1];e[h]=[i,s,r]},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var i=t.getElementsByTagName("script");i.length&&(e=i[i.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{n.b=document.baseURI||self.location.href;var e={826:0};n.O.j=t=>0===e[t];var t=(t,i)=>{var s,r,[o,a,l]=i,d=0;if(o.some((t=>0!==e[t]))){for(s in a)n.o(a,s)&&(n.m[s]=a[s]);if(l)var h=l(n)}for(t&&t(i);d<o.length;d++)r=o[d],n.o(e,r)&&e[r]&&e[r][0](),e[o[d]]=0;return n.O(h)},i=self.webpackChunkkeep_fit=self.webpackChunkkeep_fit||[];i.forEach(t.bind(null,0)),i.push=t.bind(null,i.push.bind(i))})();var s=n.O(void 0,[741],(()=>n(207)));s=n.O(s)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,